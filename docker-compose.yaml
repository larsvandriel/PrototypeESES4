version: "3.7"

services:
  db_product:
    container_name: mssqlDbProduct
    image: "mcr.microsoft.com/mssql/server:2019-latest"
    volumes:
      - eses4PrototypeVolume:/var/opt/mssql/product
    environment:
      SA_PASSWORD: "pw123_Example"
      ACCEPT_EULA: "Y"
    ports:
      - "1433"
      - "1401:1433"
    networks:
      - eses4Prototype
    restart: on-failure

  db_inventory:
    container_name: mssqlDbInventory
    image: "mcr.microsoft.com/mssql/server:2019-latest"
    volumes:
      - eses4PrototypeVolume:/var/opt/mssql/inventory
    environment:
      SA_PASSWORD: "pw123_Example"
      ACCEPT_EULA: "Y"
    ports:
      - "1433"
      - "1402:1433"
    networks:
      - eses4Prototype
    restart: on-failure

  db_order:
    container_name: mssqlDbOrder
    image: "mcr.microsoft.com/mssql/server:2019-latest"
    volumes:
      - eses4PrototypeVolume:/var/opt/mssql/order
    environment:
      SA_PASSWORD: "pw123_Example"
      ACCEPT_EULA: "Y"
    ports:
      - "1433"
      - "1403:1433"
    networks:
      - eses4Prototype
    restart: on-failure

  zookeeper:
    container_name: zookeeper_eses4_prototype
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - eses4Prototype
    restart: on-failure
  
  kafka:
    container_name: kafka_eses4_prototype
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092, PLAINTEXT_HOST://localhost:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - eses4Prototype
    healthcheck:
      test: ["CMD", "java", "-jar", "/Ping.jar", "localhost", "9092"]
      interval: 30s
      timeout: 10s
      retries: 4
    restart: on-failure

  kafka-setup:
    image: confluentinc/cp-kafka:5.3.1
    hostname: kafka-setup
    container_name: kafka-setup
    depends_on:
      - kafka
    volumes:
      - $PWD/connectors:/tmp/connectors
      - $PWD/dashboard:/tmp/dashboard
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b kafka:9092 1 20 && \
                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic CreateProductEvent && \
                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic DeleteProductEvent && \
                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic UpdateProductEvent && \
                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic DecreaseStockEvent && \
                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic UpdateStockEvent && \
                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic OrderApprovedEvent && \
                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic OrderDeniedEvent'"
    restart: on-failure
    networks:
      - eses4Prototype
  
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    depends_on:
      - zookeeper
      - kafka
      - kafka-setup

    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_JMXPORT: 9997
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schemaregistry0:8085
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: first
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect0:8083

    networks:
      - eses4Prototype
  
  backend_product:
    restart: on-failure
    depends_on:
      - db_product
      - kafka
      # - kafka-setup
    container_name: ProductManagementSystem
    build:
      context: .
      dockerfile: ProductManagementSystem\pms_api\Dockerfile
    ports:
      - "7001:80"
    networks:
      - eses4Prototype

  backend_inventory:
    restart: on-failure
    depends_on:
      - db_inventory
      - kafka
      # - kafka-setup
    container_name: InventoryManagementSystem
    build:
      context: .
      dockerfile: InventoryManagementSystem\ims_api\Dockerfile
    ports:
      - "7002:80"
    networks:
      - eses4Prototype

  backend_order:
    restart: on-failure
    depends_on:
      - db_order
      - kafka
      # - kafka-setup
    container_name: OrderManagementSystem
    build:
      context: .
      dockerfile: OrderManagementSystem\oms_api\Dockerfile
    ports:
      - "7003:80"
    networks:
      - eses4Prototype

  frontend:
    restart: on-failure
    depends_on:
      - backend_product
      - backend_inventory
      - backend_order
    container_name: frontend_eses4_prototype
    build:
      context: frontend
    ports:
      - "4200:4200"
    networks:
      - eses4Prototype

volumes:
  eses4PrototypeVolume:
networks:
  eses4Prototype:
    external: true
